# Pipeline for testing AKSDeploymentTutorialAML

trigger:
  batch: true
  branches:
    include:
    - master
    - staging

variables:
- group: AzureKeyVault

jobs:
- job: AKSDeployAMLJob
  timeoutInMinutes: 300
  cancelTimeoutInMinutes: 2
  pool:
    name: AKSDeployment
    vmImage: 'GpuSelfHostedAgent'`

  steps:
  - script: echo Hello, AKSDeployment!
    displayName: 'Builds source for AKSDeploymentTutorialAML/Keras_Tensorflow'

  - bash: |
      cd {{cookiecutter.project_name}}/Keras_Tensorflow
      conda env create -f environment.yml
      source activate deployment_aml
      conda env list
      echo Login Azure Account
      which az
      az extension remove --name azure-cli-iot-ext --debug
      az login -t $(sptenent) --service-principal -u $(spidentity) --password $(spsecret)
      az account set --subscription $(subscriptionid)
    displayName: 'Build Configuration'

  - bash: |
      source activate deployment_aml
      cd {{cookiecutter.project_name}}/Keras_Tensorflow
      papermill 00_AMLSetup.ipynb 00_AMLSetup_output.ipynb \
                --log-output \
                --no-progress-bar \
                -k python3 \
                -p resource_group $(azureresourcegroup) \
                -p workspace_name $(workspacename) \
                -p workspace_region  $(azureregion) \
                -p subscription_id $(subscriptionid) \
                -p image_name 'modelimg'
    displayName : '00_AMLSetup.ipynb'
  - template: steps/papermill.yml
    parameters:
      notebook: 01_DevelopModel.ipynb
      location: "{{cookiecutter.project_name}}/Keras_Tensorflow"
  - template: steps/papermill.yml
    parameters:
      notebook: 02_DevelopModelDriver.ipynb
      location: "{{cookiecutter.project_name}}/Keras_Tensorflow"
  - template: steps/papermill.yml
    parameters:
      notebook: 03_BuildImage.ipynb
      location: "{{cookiecutter.project_name}}/Keras_Tensorflow"
  - bash: |
      source activate deployment_aml
      export PYTHONPATH=$(pwd)/{{cookiecutter.project_name}}/Keras_Tensorflow:${PYTHONPATH}
      cd {{cookiecutter.project_name}}/Keras_Tensorflow/aks
      papermill 04_DeployOnAKS.ipynb 04_DeployOnAKS_output.ipynb \
                --log-output \
                --no-progress-bar \
                -k python3 \
                -p aks_name 'aksdeployamlaks' \
                -p aks_service_name 'aksamlsvc' \
                -p aks_location $(azureregion)
      sleep 1m
    displayName : '04_DeployOnAKS.ipynb'
  - template: steps/papermill.yml
    parameters:
      notebook: 05_TestWebApp.ipynb
      location: "{{cookiecutter.project_name}}/Keras_Tensorflow/aks"
  - template: steps/papermill.yml
    parameters:
      notebook: 06_SpeedTestWebApp.ipynb
      location: "{{cookiecutter.project_name}}/Keras_Tensorflow/aks"
  - bash: |
      source activate deployment_aml
      export PYTHONPATH=$(pwd)/{{cookiecutter.project_name}}/Keras_Tensorflow:${PYTHONPATH}
      cd {{cookiecutter.project_name}}/Keras_Tensorflow/iotedge
      papermill 04_DeployOnIOTedge.ipynb 04_DeployOnIOTedge_output.ipynb \
      	--log-output \
      	--no-progress-bar \
      	-k python3 \
      	-p iot_hub_name fstlstnameiothub \
      	-p device_id mygpudevice \
      	-p module_name mygpumodule
    displayName: '04_DeployOnIOTedge.ipynb'

  - template: steps/papermill.yml
    parameters:
      notebook: 07_TearDown.ipynb
      location: "{{cookiecutter.project_name}}/Keras_Tensorflow/aks"
  - template: steps/papermill.yml
    parameters:
      notebook: 05_TearDown.ipynb
      location: "{{cookiecutter.project_name}}/Keras_Tensorflow/iotedge"
  - bash: |
      echo Remove All Docker Containers
      docker stop $(docker ps -a -q)
      docker rm $(docker ps -a -q)
      docker rmi $(docker images -q)

      az extension remove --name azure-cli-iot-ext --debug

      echo Remove Conda Environment
      conda remove -n deployment_aml --all -q --force -y
      conda env list

      echo removing extensions
      rm -r -f /home/CicdAdmin/.azure/cliextensions/azure-cli-iot-ext

      echo Ensure Resource Group Deletion
       existResponse=$(az group exists -n $(azureresourcegroup))
      if [ "$existResponse" == "true" ]; then
        echo Deleting project resource group
        az group delete --name $(azureresourcegroup) --yes
      else
        echo Project resource group did not exist
      fi
      echo Done Cleanup
    displayName: 'Cleanup Task'
    condition: always()

  - task: CreateWorkItem@1
    inputs:
      workItemType: 'Issue'
      title: $(System.TeamProject) - Build $(Build.BuildNumber) Failed
      assignedTo: 'Yan Zhang <zhangya@microsoft.com>'
      associate: true
      teamProject: $(System.TeamProject)

      fieldMappings: |
        Description=Branch: Branch $(Build.SourceBranch) failed to build. Go to Boards>WorkItems and tag the failure type.
    displayName: 'Create work item on failure'
    condition: failed()
