# Pipeline for testing AKSDeploymentTutorialAML

resources:
  repositories:
    - repository: aitemplates
      type: github
      name: microsoft/AI
      endpoint: AIArchitecturesAndPractices-GitHub

trigger:
  batch: true
  branches:
    include:
    - master
    - staging

variables:
- group: AzureKeyVault

jobs:
- job: AKSDeployAMLJob
  timeoutInMinutes: 300
  cancelTimeoutInMinutes: 2

  pool:
    name: AKSDeployment
    vmImage: 'GpuSelfHostedAgent'

  steps:
  - script: echo Hello, AKSDeployment!
    displayName: 'Builds source for AKSDeploymentTutorialAML/Keras_Tensorflow'

  - template: .ci/steps/config_conda.yml@aitemplates
    parameters:
      conda_location: "{{cookiecutter.project_name}}/Keras_Tensorflow"
      azureSubscription: $(subscription) 
      conda: deployment_aml

  - template: .ci/steps/azpapermill.yml@aitemplates
    parameters:
      notebook: 00_AMLSetup.ipynb
      location: "{{cookiecutter.project_name}}/Keras_Tensorflow"
      azureSubscription: $(subscription)
      conda: deployment_aml
      azure_subscription: $(subscriptionid)
      azureresourcegroup: $(azureresourcegroup)
      workspacename: $(workspacename)
      azureregion: $(azureregion)
      aksimagename: 'modelimg'

  - template: .ci/steps/azpapermill.yml@aitemplates
    parameters:
      notebook: 01_DevelopModel.ipynb
      location: "{{cookiecutter.project_name}}/Keras_Tensorflow"
      azureSubscription: $(subscription)
      conda: deployment_aml
      azure_subscription: $(subscriptionid)

  - template: .ci/steps/azpapermill.yml@aitemplates
    parameters:
      notebook: 02_DevelopModelDriver.ipynb
      location: "{{cookiecutter.project_name}}/Keras_Tensorflow"
      azureSubscription: $(subscription)
      conda: deployment_aml
      azure_subscription: $(subscriptionid)

  - template: .ci/steps/azpapermill.yml@aitemplates
    parameters:
      notebook: 03_BuildImage.ipynb
      location: "{{cookiecutter.project_name}}/Keras_Tensorflow"
      azureSubscription: $(subscription)
      conda: deployment_aml
      azure_subscription: $(subscriptionid)

  - template: .ci/steps/azpapermill.yml@aitemplates
    parameters:
      notebook: aks/04_DeployOnAKS.ipynb
      location: "{{cookiecutter.project_name}}/Keras_Tensorflow"
      azureSubscription: $(subscriptionid)
      conda: deployment_aml
      aks_name: 'aksdeployamlaks'
      aks_location: $(azureregion)
      aks_service_name: 'aksamlsvc'
      python_path: "/{{cookiecutter.project_name}}/Keras_Tensorflow"

  - template: .ci/steps/azpapermill.yml@aitemplates
    parameters:
      notebook: 05_TestWebApp.ipynb
      location: "{{cookiecutter.project_name}}/Keras_Tensorflow"
      azureSubscription: $(subscription)
      conda: deployment_aml
      azure_subscription: $(subscriptionid)

  - template: .ci/steps/azpapermill.yml@aitemplates
    parameters:
      notebook: 06_SpeedTestWebApp.ipynb
      location: "{{cookiecutter.project_name}}/Keras_Tensorflow"
      azureSubscription: $(subscription)
      conda: deployment_aml
      azure_subscription: $(subscriptionid)

  - template: .ci/steps/azpapermill.yml@aitemplates
    parameters:
      notebook: 07_TearDown.ipynb
      location: "{{cookiecutter.project_name}}/Keras_Tensorflow"
      azureSubscription: $(subscription)
      conda: deployment_aml

  - bash: |
      echo Remove All Docker Containers
      docker stop $(docker ps -a -q)
      docker rm $(docker ps -a -q)
      docker rmi $(docker images -q)

      echo Removing extensions
      az extension remove --name azure-cli-iot-ext --debug
      rm -r -f /home/CicdAdmin/.azure/cliextensions/azure-cli-iot-ext

      echo Remove Conda Environment
      conda remove -n deployment_aml --all -q --force -y
      conda env list

      echo Ensure Resource Group Deletion
      existResponse=$(az group exists -n $(azureresourcegroup))
      if [ "$existResponse" == "true" ]; then
        echo Deleting project resource group
        az group delete --name $(azureresourcegroup) --yes
      else
        echo Project resource group did not exist
      fi
      echo Done Cleanup
    displayName: 'Cleanup Task'
    condition: always()

  - task: CreateWorkItem@1
    inputs:
      workItemType: 'Issue'
      title: $(System.TeamProject) - Build $(Build.BuildNumber) Failed
      assignedTo: 'Yan Zhang <zhangya@microsoft.com>'
      associate: true
      teamProject: $(System.TeamProject)

      fieldMappings: |
        Description=Branch: Branch $(Build.SourceBranch) failed to build. Go to Boards>WorkItems and tag the failure type.
    displayName: 'Create work item on failure'
    condition: failed()

